/*
 * Project home: https://github.com/jaxio/celerio-angular-quickstart
 * 
 * Source code generated by Celerio, an Open Source code generator by Jaxio.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Modificado por CARLOS BAZALAR
 * Email: cbazalarlarosa@gmail.com
 * Template pack-angular:src/main/java/dto/EntityDTOService.java.e.vm
 */
package com.incloud.hcp.service.impl;

import com.incloud.hcp.common.excel.ExcelDefault;
import com.incloud.hcp.domain.Prueba;
import com.incloud.hcp.domain.Prueba_;
import com.incloud.hcp.domain.response.PruebaResponse;
import com.incloud.hcp.exception.ServiceException;
import com.incloud.hcp.repository.delta.PruebaDeltaRepository;
import com.incloud.hcp.service.PruebaService;
import com.incloud.hcp.service._framework.bean.BeanCargaMasivoDTO;
import com.incloud.hcp.service._framework.bean.BeanListaMasivoDTO;
import com.incloud.hcp.service._framework.impl.JPACustomServiceImpl;
import com.incloud.hcp.service.support.PageRequestByExample;
import com.incloud.hcp.utils.PredicateUtils;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * A simple DTO Facility for Prueba.
 */
@Service
@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
public abstract class PruebaServiceImpl extends JPACustomServiceImpl<PruebaResponse, Prueba, Long> implements PruebaService {

    protected final String NAME_SHEET = "Prueba";
    protected final String CONFIG_TITLE = "com/incloud/hcp/excel/PruebaExcel.xml";
    private final Integer REGISTROS_COLOR = 10;

   /* @Autowired
    protected AppParametriaDeltaRepository appParametriaDeltaRepository;*/

    @Autowired
    protected PruebaDeltaRepository pruebaDeltaRepository;

    /*@Autowired
    protected PruebaRequireNewService pruebaRequireNewService;*/

    /*****************************/
    /* Metodos de Busqueda       */
    /*****************************/

    protected final ExampleMatcher setAbstractFind(ExampleMatcher matcher) {
        matcher = ExampleMatcher.matching() //
                .withMatcher(Prueba_.desc.getName(), match -> match.ignoreCase().startsWith());
        return matcher;
    }

    protected abstract Sort setFindAll(Sort sort);

    protected abstract Sort setFind(Prueba req, ExampleMatcher matcher, Example<Prueba> example, Sort sort);

    protected abstract void setFindPaginated(PageRequestByExample<Prueba> req, ExampleMatcher matcher, Example<Prueba> example);

    protected final Prueba setObtenerBeanResponse(PruebaResponse bean) {
        return bean.getBean();
    }

    protected final Class<Prueba> setObtenerClassBean() {
        return Prueba.class;
    }

    protected List<Predicate> setAbstractPredicate(PruebaResponse bean, CriteriaBuilder cb, Root<Prueba> root) {
        List<Predicate> predicates = new ArrayList<>();
        Prueba entity = bean.getBean();
        /* Obtener condiciones */
        PredicateUtils.addPredicates(predicates, bean.getIdCondicion(), "id", entity.getId(), cb, root);
        PredicateUtils.addPredicates(predicates, bean.getDescCondicion(), "desc", entity.getDesc(), cb, root);
        /* Obtener valores de Lista */
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "id", bean.getIdList(), cb, root);
        PredicateUtils.addPredicatesListValorPrimitivo(predicates, "desc", bean.getDescList(), cb, root);
        return predicates;
    }

    /****************/
    /* METODOS CRUD */
    /****************/

    protected final String validacionesPrevias(Prueba bean) throws Exception {
        String mensaje = "";
        String msg = this.setValidacionesPrevias(bean);
        if (StringUtils.isNotBlank(msg)) {
            mensaje += "* " + msg + "<br/>";
        }
        return mensaje;
    }

    protected String setValidacionesPrevias(Prueba bean) throws Exception {
        String mensaje = "";
        return mensaje;
    }

    protected String validacionesPreviasCreate(Prueba bean) throws Exception {
        String msg = null;
        Prueba validar = null;
        return msg;
    }

    protected String validacionesPreviasSave(Prueba bean) throws Exception {
        String msg = null;
        Prueba validar = null;
        return msg;
    }

    protected Prueba completarDatosBean(Prueba bean) throws Exception {
        BigDecimal data = new BigDecimal(0.00);
        bean = this.setCompletarDatosBean(bean);
        return bean;
    }

    protected Prueba setCompletarDatosBean(Prueba bean) throws Exception {
        return bean;
    }

    protected final Prueba setAbstractCreate(Prueba dto) throws Exception {
        Prueba bean = new Prueba();
        bean = (Prueba) BeanUtils.cloneBean(dto);
        return bean;
    }

    /************************/
    /* METODOS CRUD Masivos */
    /************************/

    protected Prueba setUploadExcel(Cell currentCell, Prueba prueba, int contador) throws Exception {
        Double valorDouble = new Double(0);
        BigDecimal valorDecimal = new BigDecimal(0);
        Boolean valorBoolean = new Boolean(true);
        String valorCadena = "";
        switch (contador) {
        case 1:
            try {
                valorCadena = currentCell.getStringCellValue();
                if (valorCadena.length() > 34) {
                    throw new ServiceException("Valor Campo desc contiene mas de 34 caracter(es)");
                }
                prueba.setDesc(valorCadena);
            } catch (Exception e) {
                throw new ServiceException("Valor Campo desc est√° en formato incorrecto");
            }
            break;
        default:
            break;
        }
        return prueba;
    }

    /*protected AppParametria setObtenerRegistroConfiguracionUploadExcel() {
        AppParametria appParametriaData = this.appParametriaDeltaRepository.getByModuloAndLabelAndStatus(AppParametriaModuloEnum.CARGA_EXCEL.getEstado(),
                AppParametriaLabelEnum.INICIO_REGISTRO_DATA.getEstado(), Constants.ESTADO_ACTIVO);
        return appParametriaData;
    }*/

    protected Prueba setInicializarBeanUpdateExcel() {
        Prueba bean = new Prueba();
        bean.setId(null);
        return bean;
    }

    protected final Long setObtenerId(Prueba bean) {
        return bean.getId();
    }

    /************************/
    /* Instancia de Bean    */
    /************************/

    protected final Prueba createInstance() {
        Prueba prueba = new Prueba();
        return prueba;
    }

    protected final BeanCargaMasivoDTO<Prueba> createInstanceMasivoDTO() {
        BeanCargaMasivoDTO<Prueba> beanCargaMasivoDTO = new BeanCargaMasivoDTO<Prueba>();
        return beanCargaMasivoDTO;

    }

    protected final BeanListaMasivoDTO<BeanCargaMasivoDTO<Prueba>> createInstanceListaMasivoDTO() {
        BeanListaMasivoDTO<BeanCargaMasivoDTO<Prueba>> beanCargaMasivoDTOBeanListaMasivoDTO = new BeanListaMasivoDTO<BeanCargaMasivoDTO<Prueba>>();
        return beanCargaMasivoDTOBeanListaMasivoDTO;
    }

    /*****************************/
    /* Metodos que generan Excel */
    /*****************************/

    protected String devuelveNombreSheet() {
        return this.NAME_SHEET;
    }

    protected String devuelveListaHeaderExcelXML() {
        return this.CONFIG_TITLE;
    }

    protected int setAbstractDownloadExcel(Prueba bean, HSSFRow dataRow) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador));
        contador++;
        ExcelDefault.setValueCell(bean.getDesc(), dataRow.createCell(contador));
        contador++;
        return contador;
    }

    protected int setAbstractDownloadExcelSXLSX(Prueba bean, Row dataRow, List<CellStyle> cellStyleList) {
        int contador = 0;
        ExcelDefault.setValueCell(bean.getId(), dataRow.createCell(contador), "I", cellStyleList);
        contador++;
        ExcelDefault.setValueCell(bean.getDesc(), dataRow.createCell(contador), "S", cellStyleList);
        contador++;
        return contador;
    }

    protected String setAbstractGenerateInsertExcelSXLSX(Prueba bean) {
        String fechaS = "";
        String sqlInsert = "INSERT INTO PRUEBA(";
        sqlInsert = sqlInsert + "ID" + ", ";
        sqlInsert = sqlInsert + "DESC" + ")";
        sqlInsert = sqlInsert + " VALUES (";
        sqlInsert = sqlInsert + bean.getId() + ", ";
        if (StringUtils.isBlank(bean.getDesc())) {
            sqlInsert = sqlInsert + "null";
        } else {
            sqlInsert = sqlInsert + "'" + bean.getDesc() + "'";
        }
        sqlInsert = sqlInsert + " );";
        return sqlInsert;
    }

    /*****************/
    /* Otros Metodos */
    /*****************/

}
